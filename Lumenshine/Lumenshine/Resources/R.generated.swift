//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `MaterialIcons.bundle`.
    static let materialIconsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "MaterialIcons", pathExtension: "bundle")
    
    /// `bundle.url(forResource: "MaterialIcons", withExtension: "bundle")`
    static func materialIconsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.materialIconsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 22 images.
  struct image {
    /// Image `FaceIcon`.
    static let faceIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "FaceIcon")
    /// Image `MenuColor`.
    static let menuColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "MenuColor")
    /// Image `TouchIcon`.
    static let touchIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "TouchIcon")
    /// Image `combination_lock`.
    static let combination_lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "combination_lock")
    /// Image `compose`.
    static let compose = Rswift.ImageResource(bundle: R.hostingBundle, name: "compose")
    /// Image `face_recognition`.
    static let face_recognition = Rswift.ImageResource(bundle: R.hostingBundle, name: "face_recognition")
    /// Image `fingerprint`.
    static let fingerprint = Rswift.ImageResource(bundle: R.hostingBundle, name: "fingerprint")
    /// Image `gear`.
    static let gear = Rswift.ImageResource(bundle: R.hostingBundle, name: "gear")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `money-1`.
    static let money1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "money-1")
    /// Image `money-2`.
    static let money2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "money-2")
    /// Image `more`.
    static let more = Rswift.ImageResource(bundle: R.hostingBundle, name: "more")
    /// Image `pencil`.
    static let pencil = Rswift.ImageResource(bundle: R.hostingBundle, name: "pencil")
    /// Image `puzzle-piece`.
    static let puzzlePiece = Rswift.ImageResource(bundle: R.hostingBundle, name: "puzzle-piece")
    /// Image `question`.
    static let question = Rswift.ImageResource(bundle: R.hostingBundle, name: "question")
    /// Image `rocket`.
    static let rocket = Rswift.ImageResource(bundle: R.hostingBundle, name: "rocket")
    /// Image `signIn`.
    static let signIn = Rswift.ImageResource(bundle: R.hostingBundle, name: "signIn")
    /// Image `signOut`.
    static let signOut = Rswift.ImageResource(bundle: R.hostingBundle, name: "signOut")
    /// Image `star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "star")
    /// Image `top_list`.
    static let top_list = Rswift.ImageResource(bundle: R.hostingBundle, name: "top_list")
    /// Image `user_add`.
    static let user_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_add")
    /// Image `users`.
    static let users = Rswift.ImageResource(bundle: R.hostingBundle, name: "users")
    
    /// `UIImage(named: "FaceIcon", bundle: ..., traitCollection: ...)`
    static func faceIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faceIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MenuColor", bundle: ..., traitCollection: ...)`
    static func menuColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuColor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TouchIcon", bundle: ..., traitCollection: ...)`
    static func touchIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touchIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "combination_lock", bundle: ..., traitCollection: ...)`
    static func combination_lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.combination_lock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "compose", bundle: ..., traitCollection: ...)`
    static func compose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.compose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "face_recognition", bundle: ..., traitCollection: ...)`
    static func face_recognition(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.face_recognition, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fingerprint", bundle: ..., traitCollection: ...)`
    static func fingerprint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fingerprint, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gear", bundle: ..., traitCollection: ...)`
    static func gear(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gear, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "money-1", bundle: ..., traitCollection: ...)`
    static func money1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.money1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "money-2", bundle: ..., traitCollection: ...)`
    static func money2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.money2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "more", bundle: ..., traitCollection: ...)`
    static func more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pencil", bundle: ..., traitCollection: ...)`
    static func pencil(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pencil, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "puzzle-piece", bundle: ..., traitCollection: ...)`
    static func puzzlePiece(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.puzzlePiece, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "question", bundle: ..., traitCollection: ...)`
    static func question(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.question, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rocket", bundle: ..., traitCollection: ...)`
    static func rocket(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rocket, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "signIn", bundle: ..., traitCollection: ...)`
    static func signIn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signIn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "signOut", bundle: ..., traitCollection: ...)`
    static func signOut(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signOut, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "top_list", bundle: ..., traitCollection: ...)`
    static func top_list(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.top_list, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user_add", bundle: ..., traitCollection: ...)`
    static func user_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "users", bundle: ..., traitCollection: ...)`
    static func users(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.users, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `ForgotPasswordViewController`.
    static let forgotPasswordViewController = _R.nib._ForgotPasswordViewController()
    /// Nib `HomeFoundedHeaderView`.
    static let homeFoundedHeaderView = _R.nib._HomeFoundedHeaderView()
    /// Nib `HomeUnfoundedHeaderView`.
    static let homeUnfoundedHeaderView = _R.nib._HomeUnfoundedHeaderView()
    /// Nib `IconView`.
    static let iconView = _R.nib._IconView()
    /// Nib `Lost2faViewController`.
    static let lost2faViewController = _R.nib._Lost2faViewController()
    
    /// `UINib(name: "ForgotPasswordViewController", in: bundle)`
    static func forgotPasswordViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.forgotPasswordViewController)
    }
    
    /// `UINib(name: "HomeFoundedHeaderView", in: bundle)`
    static func homeFoundedHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeFoundedHeaderView)
    }
    
    /// `UINib(name: "HomeUnfoundedHeaderView", in: bundle)`
    static func homeUnfoundedHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeUnfoundedHeaderView)
    }
    
    /// `UINib(name: "IconView", in: bundle)`
    static func iconView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iconView)
    }
    
    /// `UINib(name: "Lost2faViewController", in: bundle)`
    static func lost2faViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.lost2faViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.common` struct is generated, and contains static references to 4 localization keys.
    struct common {
      /// en translation: Cancel
      /// 
      /// Locales: en
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Common", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No
      /// 
      /// Locales: en
      static let no = Rswift.StringResource(key: "no", tableName: "Common", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ok
      /// 
      /// Locales: en
      static let ok = Rswift.StringResource(key: "ok", tableName: "Common", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Yes
      /// 
      /// Locales: en
      static let yes = Rswift.StringResource(key: "yes", tableName: "Common", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: Cancel
      /// 
      /// Locales: en
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("cancel", tableName: "Common", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No
      /// 
      /// Locales: en
      static func no(_: Void = ()) -> String {
        return NSLocalizedString("no", tableName: "Common", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ok
      /// 
      /// Locales: en
      static func ok(_: Void = ()) -> String {
        return NSLocalizedString("ok", tableName: "Common", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Yes
      /// 
      /// Locales: en
      static func yes(_: Void = ()) -> String {
        return NSLocalizedString("yes", tableName: "Common", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 119 localization keys.
    struct localizable {
      /// en translation: %1$d days ago
      /// 
      /// Locales: en
      static let xMoment_days = Rswift.StringResource(key: "x-moment_days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %1$d hours ago
      /// 
      /// Locales: en
      static let xMoment_hours = Rswift.StringResource(key: "x-moment_hours", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %1$d minutes ago
      /// 
      /// Locales: en
      static let xMoment_minutes = Rswift.StringResource(key: "x-moment_minutes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %1$d months ago
      /// 
      /// Locales: en
      static let xMoment_months = Rswift.StringResource(key: "x-moment_months", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %1$d seconds ago
      /// 
      /// Locales: en
      static let xMoment_seconds = Rswift.StringResource(key: "x-moment_seconds", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %1$d weeks ago
      /// 
      /// Locales: en
      static let xMoment_weeks = Rswift.StringResource(key: "x-moment_weeks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %1$d years ago
      /// 
      /// Locales: en
      static let xMoment_years = Rswift.StringResource(key: "x-moment_years", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: About
      /// 
      /// Locales: en
      static let about = Rswift.StringResource(key: "about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Account specific data
      /// 
      /// Locales: en
      static let account_data_title = Rswift.StringResource(key: "account_data_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Already confirmed
      /// 
      /// Locales: en
      static let email_already_confirmed = Rswift.StringResource(key: "email_already_confirmed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Anonymous
      /// 
      /// Locales: en
      static let unknown = Rswift.StringResource(key: "unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Autogenerated 2FA code with secret: %@
      /// 
      /// Locales: en
      static let lbl_tfa_secret_hint = Rswift.StringResource(key: "lbl_tfa_secret_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Back
      /// 
      /// Locales: en
      static let back = Rswift.StringResource(key: "back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Birth day
      /// 
      /// Locales: en
      static let birthday = Rswift.StringResource(key: "birthday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Birth place
      /// 
      /// Locales: en
      static let birthplace = Rswift.StringResource(key: "birthplace", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: City
      /// 
      /// Locales: en
      static let city = Rswift.StringResource(key: "city", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Close
      /// 
      /// Locales: en
      static let close = Rswift.StringResource(key: "close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Company name
      /// 
      /// Locales: en
      static let company_name = Rswift.StringResource(key: "company_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Contacts
      /// 
      /// Locales: en
      static let contacts = Rswift.StringResource(key: "contacts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Country
      /// 
      /// Locales: en
      static let country = Rswift.StringResource(key: "country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Currencies
      /// 
      /// Locales: en
      static let currencies = Rswift.StringResource(key: "currencies", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Delete
      /// 
      /// Locales: en
      static let delete = Rswift.StringResource(key: "delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Delete
      /// 
      /// Locales: en
      static let lbl_delete = Rswift.StringResource(key: "lbl_delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Deposit money
      /// 
      /// Locales: en
      static let deposit = Rswift.StringResource(key: "deposit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Details
      /// 
      /// Locales: en
      static let details = Rswift.StringResource(key: "details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Disabled
      /// 
      /// Locales: en
      static let disabled = Rswift.StringResource(key: "disabled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Email
      /// 
      /// Locales: en
      static let email = Rswift.StringResource(key: "email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Enabled
      /// 
      /// Locales: en
      static let enabled = Rswift.StringResource(key: "enabled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Error
      /// 
      /// Locales: en
      static let error = Rswift.StringResource(key: "error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Extras
      /// 
      /// Locales: en
      static let extras = Rswift.StringResource(key: "extras", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Forename
      /// 
      /// Locales: en
      static let forename = Rswift.StringResource(key: "forename", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Forgot password
      /// 
      /// Locales: en
      static let forgot_password = Rswift.StringResource(key: "forgot_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Found your wallet
      /// 
      /// Locales: en
      static let homeScreenFoundWallet = Rswift.StringResource(key: "home-screen-found-wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fund Wallet
      /// 
      /// Locales: en
      static let fund_wallet = Rswift.StringResource(key: "fund_wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Get Started
      /// 
      /// Locales: en
      static let get_started_button = Rswift.StringResource(key: "get_started_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Help
      /// 
      /// Locales: en
      static let help = Rswift.StringResource(key: "help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Home
      /// 
      /// Locales: en
      static let home = Rswift.StringResource(key: "home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: I have written it down
      /// 
      /// Locales: en
      static let lbl_mnemonic_button_title = Rswift.StringResource(key: "lbl_mnemonic_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: If you make this setup, the app will request your %@ instead of password when opened. Entering the password will not be required each time you open the app. To setup %@ please first insert your password below.
      /// 
      /// Locales: en
      static let hint_face_fingerprint = Rswift.StringResource(key: "hint_face_fingerprint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Import mnemonic
      /// 
      /// Locales: en
      static let import_mnemonic = Rswift.StringResource(key: "import_mnemonic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Invalid email.
      /// 
      /// Locales: en
      static let invalid_email = Rswift.StringResource(key: "invalid_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Invalid mobile phone number.
      /// 
      /// Locales: en
      static let invalid_phone = Rswift.StringResource(key: "invalid_phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Invalid password.
      /// 
      /// Locales: en
      static let invalid_password = Rswift.StringResource(key: "invalid_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Invalid request
      /// 
      /// Locales: en
      static let invalid_request = Rswift.StringResource(key: "invalid_request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Just now
      /// 
      /// Locales: en
      static let lbl_now_suffix = Rswift.StringResource(key: "lbl_now_suffix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Lastname
      /// 
      /// Locales: en
      static let lastname = Rswift.StringResource(key: "lastname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Let's go
      /// 
      /// Locales: en
      static let go = Rswift.StringResource(key: "go", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Log Out
      /// 
      /// Locales: en
      static let logout = Rswift.StringResource(key: "logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Login
      /// 
      /// Locales: en
      static let login = Rswift.StringResource(key: "login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Lost 2FA Secret
      /// 
      /// Locales: en
      static let lost_2fa = Rswift.StringResource(key: "lost_2fa", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Lost password
      /// 
      /// Locales: en
      static let lost_password = Rswift.StringResource(key: "lost_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Lumenshine
      /// 
      /// Locales: en
      static let app_name = Rswift.StringResource(key: "app_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Lumenshine
      /// 
      /// Locales: en
      static let homeScreenTitle = Rswift.StringResource(key: "home-screen-title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: M
      /// 
      /// Locales: en
      static let lbl_month_suffix = Rswift.StringResource(key: "lbl_month_suffix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Message
      /// 
      /// Locales: en
      static let lbl_message = Rswift.StringResource(key: "lbl_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Mobile phone
      /// 
      /// Locales: en
      static let mobile_phone = Rswift.StringResource(key: "mobile_phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: More
      /// 
      /// Locales: en
      static let more = Rswift.StringResource(key: "more", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Nationality
      /// 
      /// Locales: en
      static let nationality = Rswift.StringResource(key: "nationality", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Next
      /// 
      /// Locales: en
      static let next = Rswift.StringResource(key: "next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Not logged in
      /// 
      /// Locales: en
      static let not_logged_in = Rswift.StringResource(key: "not_logged_in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: OK
      /// 
      /// Locales: en
      static let ok = Rswift.StringResource(key: "ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Open
      /// 
      /// Locales: en
      static let `open` = Rswift.StringResource(key: "open", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Open Google Authenticator to generate 2FA code with secret: %@
      /// 
      /// Locales: en
      static let lbl_tfa_secret_authenticator = Rswift.StringResource(key: "lbl_tfa_secret_authenticator", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Password
      /// 
      /// Locales: en
      static let password = Rswift.StringResource(key: "password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Password requirements
      /// 
      /// Locales: en
      static let password_hint_title = Rswift.StringResource(key: "password_hint_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please confirm email to continue the registration process
      /// 
      /// Locales: en
      static let lbl_email_confirmation = Rswift.StringResource(key: "lbl_email_confirmation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please write down and safely store this phrase. It's the ONLY WAY to retrieve your wallet.
      /// 
      /// Locales: en
      static let lbl_mnemonic_title = Rswift.StringResource(key: "lbl_mnemonic_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Receive
      /// 
      /// Locales: en
      static let receive = Rswift.StringResource(key: "receive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Recommend
      /// 
      /// Locales: en
      static let lbl_recommend = Rswift.StringResource(key: "lbl_recommend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Repeat Password
      /// 
      /// Locales: en
      static let repeat_password = Rswift.StringResource(key: "repeat_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Repetition do not match with password.
      /// 
      /// Locales: en
      static let invalid_repassword = Rswift.StringResource(key: "invalid_repassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Resend confirmation mail
      /// 
      /// Locales: en
      static let email_resend_confirmation = Rswift.StringResource(key: "email_resend_confirmation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Reset 2fa
      /// 
      /// Locales: en
      static let reset_2fa = Rswift.StringResource(key: "reset_2fa", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Reset password
      /// 
      /// Locales: en
      static let reset_password = Rswift.StringResource(key: "reset_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Salutation
      /// 
      /// Locales: en
      static let salutation = Rswift.StringResource(key: "salutation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Save
      /// 
      /// Locales: en
      static let lbl_save = Rswift.StringResource(key: "lbl_save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Save
      /// 
      /// Locales: en
      static let save = Rswift.StringResource(key: "save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Scan
      /// 
      /// Locales: en
      static let scan = Rswift.StringResource(key: "scan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sell
      /// 
      /// Locales: en
      static let sell = Rswift.StringResource(key: "sell", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en
      static let send = Rswift.StringResource(key: "send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en
      static let settings = Rswift.StringResource(key: "settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Setup Face Recognition
      /// 
      /// Locales: en
      static let face_recognition = Rswift.StringResource(key: "face_recognition", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Setup Fingerprint
      /// 
      /// Locales: en
      static let fingerprint = Rswift.StringResource(key: "fingerprint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sign Out
      /// 
      /// Locales: en
      static let signout = Rswift.StringResource(key: "signout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sign up
      /// 
      /// Locales: en
      static let signup = Rswift.StringResource(key: "signup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Something went wrong. Try again, please.
      /// 
      /// Locales: en
      static let sign_in_error_msg = Rswift.StringResource(key: "sign_in_error_msg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: State
      /// 
      /// Locales: en
      static let state = Rswift.StringResource(key: "state", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Street address
      /// 
      /// Locales: en
      static let street_address = Rswift.StringResource(key: "street_address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Street number
      /// 
      /// Locales: en
      static let street_number = Rswift.StringResource(key: "street_number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Submit
      /// 
      /// Locales: en
      static let submit = Rswift.StringResource(key: "submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Title
      /// 
      /// Locales: en
      static let title = Rswift.StringResource(key: "title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Today
      /// 
      /// Locales: en
      static let lbl_today = Rswift.StringResource(key: "lbl_today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Touch ID
      /// 
      /// Locales: en
      static let touch_id = Rswift.StringResource(key: "touch_id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Transactions
      /// 
      /// Locales: en
      static let transactions = Rswift.StringResource(key: "transactions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Two Factor code
      /// 
      /// Locales: en
      static let tfa_code = Rswift.StringResource(key: "tfa_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unexpected data type
      /// 
      /// Locales: en
      static let unexpected_data_type = Rswift.StringResource(key: "unexpected_data_type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Use another account
      /// 
      /// Locales: en
      static let account_different = Rswift.StringResource(key: "account_different", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: User is not logged in
      /// 
      /// Locales: en
      static let user_not_logged_in = Rswift.StringResource(key: "user_not_logged_in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: User specific data
      /// 
      /// Locales: en
      static let user_data_title = Rswift.StringResource(key: "user_data_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Username
      /// 
      /// Locales: en
      static let username = Rswift.StringResource(key: "username", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: W
      /// 
      /// Locales: en
      static let lbl_week_suffix = Rswift.StringResource(key: "lbl_week_suffix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Wallets
      /// 
      /// Locales: en
      static let wallets = Rswift.StringResource(key: "wallets", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Welcome
      /// 
      /// Locales: en
      static let welcome = Rswift.StringResource(key: "welcome", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Withdraw money
      /// 
      /// Locales: en
      static let withdraw = Rswift.StringResource(key: "withdraw", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Wrong account or password
      /// 
      /// Locales: en
      static let bad_credentials = Rswift.StringResource(key: "bad_credentials", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your new password must have at least 9 characters.  It must contain small letters and capitals.
      /// 
      /// Locales: en
      static let password_hint = Rswift.StringResource(key: "password_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Zip code
      /// 
      /// Locales: en
      static let zip_code = Rswift.StringResource(key: "zip_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: d
      /// 
      /// Locales: en
      static let lbl_day_suffix = Rswift.StringResource(key: "lbl_day_suffix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: h
      /// 
      /// Locales: en
      static let lbl_hour_suffix = Rswift.StringResource(key: "lbl_hour_suffix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: m
      /// 
      /// Locales: en
      static let lbl_minute_suffix = Rswift.StringResource(key: "lbl_minute_suffix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: one day ago
      /// 
      /// Locales: en
      static let lbl_moment_day_count = Rswift.StringResource(key: "lbl_moment_day_count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: one hour ago
      /// 
      /// Locales: en
      static let lbl_moment_hour_count = Rswift.StringResource(key: "lbl_moment_hour_count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: one minute ago
      /// 
      /// Locales: en
      static let lbl_moment_minute_count = Rswift.StringResource(key: "lbl_moment_minute_count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: one month ago
      /// 
      /// Locales: en
      static let lbl_moment_month_count = Rswift.StringResource(key: "lbl_moment_month_count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: one second ago
      /// 
      /// Locales: en
      static let lbl_moment_second_count = Rswift.StringResource(key: "lbl_moment_second_count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: one week ago
      /// 
      /// Locales: en
      static let lbl_moment_week_count = Rswift.StringResource(key: "lbl_moment_week_count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: one year ago
      /// 
      /// Locales: en
      static let lbl_moment_year_count = Rswift.StringResource(key: "lbl_moment_year_count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: y
      /// 
      /// Locales: en
      static let lbl_year_suffix = Rswift.StringResource(key: "lbl_year_suffix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: %1$d days ago
      /// 
      /// Locales: en
      static func xMoment_days(_ value1: Int) -> String {
        return String(format: NSLocalizedString("x-moment_days", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %1$d hours ago
      /// 
      /// Locales: en
      static func xMoment_hours(_ value1: Int) -> String {
        return String(format: NSLocalizedString("x-moment_hours", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %1$d minutes ago
      /// 
      /// Locales: en
      static func xMoment_minutes(_ value1: Int) -> String {
        return String(format: NSLocalizedString("x-moment_minutes", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %1$d months ago
      /// 
      /// Locales: en
      static func xMoment_months(_ value1: Int) -> String {
        return String(format: NSLocalizedString("x-moment_months", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %1$d seconds ago
      /// 
      /// Locales: en
      static func xMoment_seconds(_ value1: Int) -> String {
        return String(format: NSLocalizedString("x-moment_seconds", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %1$d weeks ago
      /// 
      /// Locales: en
      static func xMoment_weeks(_ value1: Int) -> String {
        return String(format: NSLocalizedString("x-moment_weeks", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %1$d years ago
      /// 
      /// Locales: en
      static func xMoment_years(_ value1: Int) -> String {
        return String(format: NSLocalizedString("x-moment_years", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: About
      /// 
      /// Locales: en
      static func about(_: Void = ()) -> String {
        return NSLocalizedString("about", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Account specific data
      /// 
      /// Locales: en
      static func account_data_title(_: Void = ()) -> String {
        return NSLocalizedString("account_data_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Already confirmed
      /// 
      /// Locales: en
      static func email_already_confirmed(_: Void = ()) -> String {
        return NSLocalizedString("email_already_confirmed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Anonymous
      /// 
      /// Locales: en
      static func unknown(_: Void = ()) -> String {
        return NSLocalizedString("unknown", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Autogenerated 2FA code with secret: %@
      /// 
      /// Locales: en
      static func lbl_tfa_secret_hint(_ value1: String) -> String {
        return String(format: NSLocalizedString("lbl_tfa_secret_hint", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Back
      /// 
      /// Locales: en
      static func back(_: Void = ()) -> String {
        return NSLocalizedString("back", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Birth day
      /// 
      /// Locales: en
      static func birthday(_: Void = ()) -> String {
        return NSLocalizedString("birthday", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Birth place
      /// 
      /// Locales: en
      static func birthplace(_: Void = ()) -> String {
        return NSLocalizedString("birthplace", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: City
      /// 
      /// Locales: en
      static func city(_: Void = ()) -> String {
        return NSLocalizedString("city", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Close
      /// 
      /// Locales: en
      static func close(_: Void = ()) -> String {
        return NSLocalizedString("close", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Company name
      /// 
      /// Locales: en
      static func company_name(_: Void = ()) -> String {
        return NSLocalizedString("company_name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Contacts
      /// 
      /// Locales: en
      static func contacts(_: Void = ()) -> String {
        return NSLocalizedString("contacts", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Country
      /// 
      /// Locales: en
      static func country(_: Void = ()) -> String {
        return NSLocalizedString("country", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Currencies
      /// 
      /// Locales: en
      static func currencies(_: Void = ()) -> String {
        return NSLocalizedString("currencies", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Delete
      /// 
      /// Locales: en
      static func delete(_: Void = ()) -> String {
        return NSLocalizedString("delete", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Delete
      /// 
      /// Locales: en
      static func lbl_delete(_: Void = ()) -> String {
        return NSLocalizedString("lbl_delete", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deposit money
      /// 
      /// Locales: en
      static func deposit(_: Void = ()) -> String {
        return NSLocalizedString("deposit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Details
      /// 
      /// Locales: en
      static func details(_: Void = ()) -> String {
        return NSLocalizedString("details", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Disabled
      /// 
      /// Locales: en
      static func disabled(_: Void = ()) -> String {
        return NSLocalizedString("disabled", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Email
      /// 
      /// Locales: en
      static func email(_: Void = ()) -> String {
        return NSLocalizedString("email", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enabled
      /// 
      /// Locales: en
      static func enabled(_: Void = ()) -> String {
        return NSLocalizedString("enabled", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Error
      /// 
      /// Locales: en
      static func error(_: Void = ()) -> String {
        return NSLocalizedString("error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Extras
      /// 
      /// Locales: en
      static func extras(_: Void = ()) -> String {
        return NSLocalizedString("extras", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Forename
      /// 
      /// Locales: en
      static func forename(_: Void = ()) -> String {
        return NSLocalizedString("forename", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Forgot password
      /// 
      /// Locales: en
      static func forgot_password(_: Void = ()) -> String {
        return NSLocalizedString("forgot_password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Found your wallet
      /// 
      /// Locales: en
      static func homeScreenFoundWallet(_: Void = ()) -> String {
        return NSLocalizedString("home-screen-found-wallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fund Wallet
      /// 
      /// Locales: en
      static func fund_wallet(_: Void = ()) -> String {
        return NSLocalizedString("fund_wallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Get Started
      /// 
      /// Locales: en
      static func get_started_button(_: Void = ()) -> String {
        return NSLocalizedString("get_started_button", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Help
      /// 
      /// Locales: en
      static func help(_: Void = ()) -> String {
        return NSLocalizedString("help", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Home
      /// 
      /// Locales: en
      static func home(_: Void = ()) -> String {
        return NSLocalizedString("home", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I have written it down
      /// 
      /// Locales: en
      static func lbl_mnemonic_button_title(_: Void = ()) -> String {
        return NSLocalizedString("lbl_mnemonic_button_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: If you make this setup, the app will request your %@ instead of password when opened. Entering the password will not be required each time you open the app. To setup %@ please first insert your password below.
      /// 
      /// Locales: en
      static func hint_face_fingerprint(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("hint_face_fingerprint", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: Import mnemonic
      /// 
      /// Locales: en
      static func import_mnemonic(_: Void = ()) -> String {
        return NSLocalizedString("import_mnemonic", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid email.
      /// 
      /// Locales: en
      static func invalid_email(_: Void = ()) -> String {
        return NSLocalizedString("invalid_email", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid mobile phone number.
      /// 
      /// Locales: en
      static func invalid_phone(_: Void = ()) -> String {
        return NSLocalizedString("invalid_phone", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid password.
      /// 
      /// Locales: en
      static func invalid_password(_: Void = ()) -> String {
        return NSLocalizedString("invalid_password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid request
      /// 
      /// Locales: en
      static func invalid_request(_: Void = ()) -> String {
        return NSLocalizedString("invalid_request", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Just now
      /// 
      /// Locales: en
      static func lbl_now_suffix(_: Void = ()) -> String {
        return NSLocalizedString("lbl_now_suffix", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Lastname
      /// 
      /// Locales: en
      static func lastname(_: Void = ()) -> String {
        return NSLocalizedString("lastname", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Let's go
      /// 
      /// Locales: en
      static func go(_: Void = ()) -> String {
        return NSLocalizedString("go", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Log Out
      /// 
      /// Locales: en
      static func logout(_: Void = ()) -> String {
        return NSLocalizedString("logout", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login
      /// 
      /// Locales: en
      static func login(_: Void = ()) -> String {
        return NSLocalizedString("login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Lost 2FA Secret
      /// 
      /// Locales: en
      static func lost_2fa(_: Void = ()) -> String {
        return NSLocalizedString("lost_2fa", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Lost password
      /// 
      /// Locales: en
      static func lost_password(_: Void = ()) -> String {
        return NSLocalizedString("lost_password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Lumenshine
      /// 
      /// Locales: en
      static func app_name(_: Void = ()) -> String {
        return NSLocalizedString("app_name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Lumenshine
      /// 
      /// Locales: en
      static func homeScreenTitle(_: Void = ()) -> String {
        return NSLocalizedString("home-screen-title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: M
      /// 
      /// Locales: en
      static func lbl_month_suffix(_: Void = ()) -> String {
        return NSLocalizedString("lbl_month_suffix", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Message
      /// 
      /// Locales: en
      static func lbl_message(_: Void = ()) -> String {
        return NSLocalizedString("lbl_message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mobile phone
      /// 
      /// Locales: en
      static func mobile_phone(_: Void = ()) -> String {
        return NSLocalizedString("mobile_phone", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: More
      /// 
      /// Locales: en
      static func more(_: Void = ()) -> String {
        return NSLocalizedString("more", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Nationality
      /// 
      /// Locales: en
      static func nationality(_: Void = ()) -> String {
        return NSLocalizedString("nationality", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Next
      /// 
      /// Locales: en
      static func next(_: Void = ()) -> String {
        return NSLocalizedString("next", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Not logged in
      /// 
      /// Locales: en
      static func not_logged_in(_: Void = ()) -> String {
        return NSLocalizedString("not_logged_in", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OK
      /// 
      /// Locales: en
      static func ok(_: Void = ()) -> String {
        return NSLocalizedString("ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Open
      /// 
      /// Locales: en
      static func `open`(_: Void = ()) -> String {
        return NSLocalizedString("open", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Open Google Authenticator to generate 2FA code with secret: %@
      /// 
      /// Locales: en
      static func lbl_tfa_secret_authenticator(_ value1: String) -> String {
        return String(format: NSLocalizedString("lbl_tfa_secret_authenticator", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Password
      /// 
      /// Locales: en
      static func password(_: Void = ()) -> String {
        return NSLocalizedString("password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password requirements
      /// 
      /// Locales: en
      static func password_hint_title(_: Void = ()) -> String {
        return NSLocalizedString("password_hint_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please confirm email to continue the registration process
      /// 
      /// Locales: en
      static func lbl_email_confirmation(_: Void = ()) -> String {
        return NSLocalizedString("lbl_email_confirmation", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please write down and safely store this phrase. It's the ONLY WAY to retrieve your wallet.
      /// 
      /// Locales: en
      static func lbl_mnemonic_title(_: Void = ()) -> String {
        return NSLocalizedString("lbl_mnemonic_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Receive
      /// 
      /// Locales: en
      static func receive(_: Void = ()) -> String {
        return NSLocalizedString("receive", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Recommend
      /// 
      /// Locales: en
      static func lbl_recommend(_: Void = ()) -> String {
        return NSLocalizedString("lbl_recommend", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Repeat Password
      /// 
      /// Locales: en
      static func repeat_password(_: Void = ()) -> String {
        return NSLocalizedString("repeat_password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Repetition do not match with password.
      /// 
      /// Locales: en
      static func invalid_repassword(_: Void = ()) -> String {
        return NSLocalizedString("invalid_repassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Resend confirmation mail
      /// 
      /// Locales: en
      static func email_resend_confirmation(_: Void = ()) -> String {
        return NSLocalizedString("email_resend_confirmation", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reset 2fa
      /// 
      /// Locales: en
      static func reset_2fa(_: Void = ()) -> String {
        return NSLocalizedString("reset_2fa", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reset password
      /// 
      /// Locales: en
      static func reset_password(_: Void = ()) -> String {
        return NSLocalizedString("reset_password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Salutation
      /// 
      /// Locales: en
      static func salutation(_: Void = ()) -> String {
        return NSLocalizedString("salutation", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Save
      /// 
      /// Locales: en
      static func lbl_save(_: Void = ()) -> String {
        return NSLocalizedString("lbl_save", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Save
      /// 
      /// Locales: en
      static func save(_: Void = ()) -> String {
        return NSLocalizedString("save", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Scan
      /// 
      /// Locales: en
      static func scan(_: Void = ()) -> String {
        return NSLocalizedString("scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sell
      /// 
      /// Locales: en
      static func sell(_: Void = ()) -> String {
        return NSLocalizedString("sell", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en
      static func send(_: Void = ()) -> String {
        return NSLocalizedString("send", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en
      static func settings(_: Void = ()) -> String {
        return NSLocalizedString("settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Setup Face Recognition
      /// 
      /// Locales: en
      static func face_recognition(_: Void = ()) -> String {
        return NSLocalizedString("face_recognition", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Setup Fingerprint
      /// 
      /// Locales: en
      static func fingerprint(_: Void = ()) -> String {
        return NSLocalizedString("fingerprint", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sign Out
      /// 
      /// Locales: en
      static func signout(_: Void = ()) -> String {
        return NSLocalizedString("signout", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sign up
      /// 
      /// Locales: en
      static func signup(_: Void = ()) -> String {
        return NSLocalizedString("signup", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Something went wrong. Try again, please.
      /// 
      /// Locales: en
      static func sign_in_error_msg(_: Void = ()) -> String {
        return NSLocalizedString("sign_in_error_msg", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: State
      /// 
      /// Locales: en
      static func state(_: Void = ()) -> String {
        return NSLocalizedString("state", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Street address
      /// 
      /// Locales: en
      static func street_address(_: Void = ()) -> String {
        return NSLocalizedString("street_address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Street number
      /// 
      /// Locales: en
      static func street_number(_: Void = ()) -> String {
        return NSLocalizedString("street_number", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Submit
      /// 
      /// Locales: en
      static func submit(_: Void = ()) -> String {
        return NSLocalizedString("submit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Title
      /// 
      /// Locales: en
      static func title(_: Void = ()) -> String {
        return NSLocalizedString("title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Today
      /// 
      /// Locales: en
      static func lbl_today(_: Void = ()) -> String {
        return NSLocalizedString("lbl_today", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Touch ID
      /// 
      /// Locales: en
      static func touch_id(_: Void = ()) -> String {
        return NSLocalizedString("touch_id", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transactions
      /// 
      /// Locales: en
      static func transactions(_: Void = ()) -> String {
        return NSLocalizedString("transactions", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Two Factor code
      /// 
      /// Locales: en
      static func tfa_code(_: Void = ()) -> String {
        return NSLocalizedString("tfa_code", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unexpected data type
      /// 
      /// Locales: en
      static func unexpected_data_type(_: Void = ()) -> String {
        return NSLocalizedString("unexpected_data_type", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Use another account
      /// 
      /// Locales: en
      static func account_different(_: Void = ()) -> String {
        return NSLocalizedString("account_different", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: User is not logged in
      /// 
      /// Locales: en
      static func user_not_logged_in(_: Void = ()) -> String {
        return NSLocalizedString("user_not_logged_in", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: User specific data
      /// 
      /// Locales: en
      static func user_data_title(_: Void = ()) -> String {
        return NSLocalizedString("user_data_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Username
      /// 
      /// Locales: en
      static func username(_: Void = ()) -> String {
        return NSLocalizedString("username", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: W
      /// 
      /// Locales: en
      static func lbl_week_suffix(_: Void = ()) -> String {
        return NSLocalizedString("lbl_week_suffix", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallets
      /// 
      /// Locales: en
      static func wallets(_: Void = ()) -> String {
        return NSLocalizedString("wallets", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Welcome
      /// 
      /// Locales: en
      static func welcome(_: Void = ()) -> String {
        return NSLocalizedString("welcome", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdraw money
      /// 
      /// Locales: en
      static func withdraw(_: Void = ()) -> String {
        return NSLocalizedString("withdraw", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wrong account or password
      /// 
      /// Locales: en
      static func bad_credentials(_: Void = ()) -> String {
        return NSLocalizedString("bad_credentials", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your new password must have at least 9 characters.  It must contain small letters and capitals.
      /// 
      /// Locales: en
      static func password_hint(_: Void = ()) -> String {
        return NSLocalizedString("password_hint", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Zip code
      /// 
      /// Locales: en
      static func zip_code(_: Void = ()) -> String {
        return NSLocalizedString("zip_code", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: d
      /// 
      /// Locales: en
      static func lbl_day_suffix(_: Void = ()) -> String {
        return NSLocalizedString("lbl_day_suffix", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: h
      /// 
      /// Locales: en
      static func lbl_hour_suffix(_: Void = ()) -> String {
        return NSLocalizedString("lbl_hour_suffix", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: m
      /// 
      /// Locales: en
      static func lbl_minute_suffix(_: Void = ()) -> String {
        return NSLocalizedString("lbl_minute_suffix", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: one day ago
      /// 
      /// Locales: en
      static func lbl_moment_day_count(_: Void = ()) -> String {
        return NSLocalizedString("lbl_moment_day_count", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: one hour ago
      /// 
      /// Locales: en
      static func lbl_moment_hour_count(_: Void = ()) -> String {
        return NSLocalizedString("lbl_moment_hour_count", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: one minute ago
      /// 
      /// Locales: en
      static func lbl_moment_minute_count(_: Void = ()) -> String {
        return NSLocalizedString("lbl_moment_minute_count", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: one month ago
      /// 
      /// Locales: en
      static func lbl_moment_month_count(_: Void = ()) -> String {
        return NSLocalizedString("lbl_moment_month_count", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: one second ago
      /// 
      /// Locales: en
      static func lbl_moment_second_count(_: Void = ()) -> String {
        return NSLocalizedString("lbl_moment_second_count", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: one week ago
      /// 
      /// Locales: en
      static func lbl_moment_week_count(_: Void = ()) -> String {
        return NSLocalizedString("lbl_moment_week_count", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: one year ago
      /// 
      /// Locales: en
      static func lbl_moment_year_count(_: Void = ()) -> String {
        return NSLocalizedString("lbl_moment_year_count", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: y
      /// 
      /// Locales: en
      static func lbl_year_suffix(_: Void = ()) -> String {
        return NSLocalizedString("lbl_year_suffix", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R {
  struct nib {
    struct _ForgotPasswordViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ForgotPasswordViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _HomeFoundedHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeFoundedHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HomeFoundedHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeFoundedHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _HomeUnfoundedHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeUnfoundedHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HomeUnfoundedHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeUnfoundedHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _IconView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "IconView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _Lost2faViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "Lost2faViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
